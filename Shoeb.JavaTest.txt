Q1: Merge two arrays by satisfying given constraints
Given two sorted arrays X[] and Y[] of size m and n each where m >= n and X[] has exactly n vacant cells,
 merge elements of Y[] in their correct position in array X[], i.e., merge (X, Y) by keeping the sorted order.

For example,

Input: X[] = { 0, 2, 0, 3, 0, 5, 6, 0, 0 }
Y[] = { 1, 8, 9, 10, 15 } The vacant cells in X[] is represented by 0 
Output: X[] = { 1, 2, 3, 5, 6, 8, 9, 10, 15 }


Answer:		

import java.util.Arrays;

public class MergeArrays {

    public static void mergeArrays(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;
       

        int j = m - 1;
        for (int i = m - 1; i >= 0; i--) {
            if (X[i] != 0) {
                X[j--] = X[i];
            }
        }
        
        // Merge Y[] into X[]
        int i = j + 1; // Start index for X[]
        j = 0; // Start index for Y[]
        int k = 0; // Start index for merged array
        
        while (i < m && j < n) {
            if (X[i] < Y[j]) {
                X[k++] = X[i++];
            } else {
                X[k++] = Y[j++];
            }
        }
        
        
        while (j < n) {
            X[k++] = Y[j++];
        }
    }

    public static void main(String[] args) {
        int[] X = { 0, 2, 0, 3, 0, 5, 6, 0, 0 };
        int[] Y = { 1, 8, 9, 10, 15 };
        
        mergeArrays(X, Y);
        
        System.out.println("Merged array: " + Arrays.toString(X));
    }
}



------------------------------------------------------------------------------------------------------------------------------------------

Q2:Find maximum sum path involving elements of given arrays
Given two sorted arrays of integers, find a maximum sum path involving elements of both arrays whose sum is maximum. 
We can start from either array, but we can switch between arrays only through its common elements.

For example,

Input: X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 }
Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 }  
The maximum sum path is: 1 —> 2 —> 3 —> 6 —> 7 —> 9 —> 10 —> 12 —> 15 —> 16 —> 18 —> 100 
The maximum sum is 199


Answer:

import java.util.*;

public class MaxSumPath {
    
    public static int maxSumPath(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;
        
        
        int i = 0, j = 0;
        int sumX = 0, sumY = 0, result = 0;
      
        while (i < m && j < n) {
            // If current element of X is smaller, add it to sumX
            if (X[i] < Y[j]) {
                sumX += X[i++];
            }

            else if (Y[j] < X[i]) {
                sumY += Y[j++];
            }

            else {
                result += Math.max(sumX, sumY) + X[i];
                sumX = 0;
                sumY = 0;
                i++;
                j++;
            }
        }
        

        while (i < m) {
            sumX += X[i++];
        }
        
        
        while (j < n) {
            sumY += Y[j++];
        }
        
      
        result += Math.max(sumX, sumY);
        return result;
    }

    public static void main(String[] args) {
        int[] X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 };
        int[] Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 };
        
        int maxSum = maxSumPath(X, Y);
        System.out.println("Maximum sum path: " + maxSum);
    }
}



------------------------------------------------------------------------------------------------------------------------------------------



Q3:Write a Java Program to count the number of words in a string using HashMap.

Answer:

import java.util.HashMap;

public class WordCountUsingHashMap {
    
    public static HashMap<String, Integer> countWords(String input) {
        String[] words = input.split("\\s+");
        
        HashMap<String, Integer> wordCountMap = new HashMap<>();
        
        for (String word : words) {      
            word = word.replaceAll("[^a-zA-Z]", "").toLowerCase();
            
            if (!word.isEmpty()) {
                wordCountMap.put(word, wordCountMap.getOrDefault(word, 0) + 1);
            }
        }
        
        return wordCountMap;
    }

    public static void main(String[] args) {
        String input = "Hello world! This is a simple example, hello world.";
        
        HashMap<String, Integer> wordCountMap = countWords(input);
        
        System.out.println("Word Counts:");
        for (String word : wordCountMap.keySet()) {
            System.out.println(word + ": " + wordCountMap.get(word));
        }
    }
}


------------------------------------------------------------------------------------------------------------------------------------------


Q4:Write a Java Program to find the duplicate characters in a string.

Answer:

import java.util.HashMap;

public class DuplicateCharacters {
    
    public static void findDuplicateCharacters(String str) {
        HashMap<Character, Integer> charCountMap = new HashMap<>();
        char[] charArray = str.toCharArray();
        
        for (char ch : charArray) {
            if (ch != ' ') {
                charCountMap.put(ch, charCountMap.getOrDefault(ch, 0) + 1);
            }
        }
        

        System.out.println("Duplicate characters in the string:");
        for (char ch : charCountMap.keySet()) {
            if (charCountMap.get(ch) > 1) {
                System.out.println(ch + " - " + charCountMap.get(ch) + " times");
            }
        }
    }

    public static void main(String[] args) {
        String str = "Shoeb Syed";
        findDuplicateCharacters(str);
    }
}


